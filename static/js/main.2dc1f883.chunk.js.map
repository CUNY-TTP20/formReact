{"version":3,"sources":["Components/FormTest.jsx","App.js","serviceWorker.js","index.js"],"names":["EForm","props","tog","handleClick","state","edit","setState","edited","cancel","back","handleCancel","firstName","FirstName","lastName","LastName","front","handleSubmit","event","preventDefault","handleChange","val","target","value","name","this","className","style","transform","onSubmit","type","placeholder","onChange","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAuGeA,G,wDAnGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAwDRC,IAAM,aAzDa,EA2DnBC,YAAc,YACY,IAApB,EAAKC,MAAMC,MACb,EAAKH,MACL,EAAKI,SAAS,CAAEC,QAAQ,EAAMF,MAAM,EAAMG,QAAQ,EAAKC,MAAK,KAE5D,EAAKH,SAAS,CAAED,MAAM,KAhEP,EAmEnBK,aAAe,WACb,EAAKJ,SAAS,CACZK,UAAW,EAAKV,MAAMW,UACtBC,SAAU,EAAKZ,MAAMa,SACrBP,QAAQ,EACRF,MAAM,EACNG,QAAQ,EACRO,OAAO,EACPN,MAAK,KA3EU,EA+EnBO,aAAe,SAACC,GACdA,EAAMC,iBACN,EAAKZ,SAAS,CACZD,MAAM,EACNE,QAAQ,EACRC,QAAQ,EACRO,OAAO,EACPN,MAAK,IAEP,EAAKH,SAAS,CAAEE,QAAQ,KAxFP,EA0FnBW,aAAe,SAACF,GACd,IAAMG,EAAMH,EAAMI,OAAOC,MACzB,EAAKhB,SAAL,2BACK,EAAKF,OADV,kBAEGa,EAAMI,OAAOE,KAAOH,MA5FvB,EAAKhB,MAAQ,CACXO,UAAW,EAAKV,MAAMW,UACtBC,SAAU,EAAKZ,MAAMa,SACrBT,MAAM,EACNE,QAAQ,EACRC,QAAQ,EACRC,MAAM,EACNM,OAAM,GATS,E,qDAaT,IAAD,EACDN,EAAOe,KAAKpB,MAAMK,KAClBM,EAAQS,KAAKpB,MAAMW,MACzB,OACE,yBAAKU,UAAW,QACZ,yBAAKA,UAAW,UAChB,yBAAKA,UAAW,OAAQC,OAAK,GAC3BC,UAAUZ,EAAS,mBAAmB,MADX,0BAEhBN,EAAO,kBAAoB,MAFX,mCAGPA,EAAO,UAAY,UAHZ,IAMtBe,KAAKpB,MAAMC,KACR,yBAAKoB,UAAW,qBACZ,0BAAMG,SAAUJ,KAAKR,cAC3B,2BAAOa,KAAK,OAAON,KAAK,YAAYO,YAAY,uBAAuBR,MAAOE,KAAKpB,MAAMO,UAAWoB,SAAUP,KAAKL,eACnH,6BACM,2BAAOU,KAAK,OAAON,KAAK,WAAWO,YAAY,sBAAsBR,MAAOE,KAAKpB,MAAMS,SAAUkB,SAAUP,KAAKL,eAAsB,6BACtI,4CAEK,yBAAKM,UAAW,sBAAsB,4BAAKD,KAAKpB,MAAMO,WACvD,4BAAKa,KAAKpB,MAAMS,aAMlC,6BACGW,KAAKpB,MAAMG,OACV,+BAEA,4BAAQyB,QAASR,KAAKrB,aAAtB,SAGN,6BACGqB,KAAKpB,MAAMI,OACV,4BAAQwB,QAASR,KAAKd,cAAtB,UAEA,kC,GApDQuB,c,MCeLC,MAdf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,CACEb,UAAU,QACVE,SAAS,aAHb,SAIU,kBAAC,EAAD,CACNF,UAAU,OACVE,SAAS,eCAGqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2dc1f883.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./css/styling.css\";\r\nclass EForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      firstName: this.props.FirstName,\r\n      lastName: this.props.LastName,\r\n      edit: false,\r\n      edited: false,\r\n      cancel: false,\r\n      back: false,\r\n      front:false,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const back = this.state.back;\r\n    const front = this.state.front;\r\n    return (\r\n      <div className={\"main\"}>\r\n          <div className={\"Canvas\"}>\r\n          <div className={\"Form\"} style={{\r\n            transform:front ?  \"rotateY(-180deg)\":null,\r\n            transform: back ? \"rotateY(180deg)\" : null,\r\n            backfaceVisibility: back ? \"visible\" : \"hidden\"\r\n            \r\n          }}>\r\n                {this.state.edit ?\r\n                    <div className={\"FormI FormI--back\"}>\r\n                        <form onSubmit={this.handleSubmit}>\r\n                  <input type=\"text\" name=\"firstName\" placeholder=\"First Name Goes Here\" value={this.state.firstName} onChange={this.handleChange}></input>\r\n                  <br/>\r\n                        <input type=\"text\" name=\"lastName\" placeholder=\"Last Name Goes Here\" value={this.state.lastName} onChange={this.handleChange}></input><br/>\r\n                        <button>Submit</button>\r\n                        </form>\r\n                    </div> : <div className={\"FormI FormI--front\"}><h1>{this.state.firstName}</h1>\r\n                            <h1>{this.state.lastName}</h1></div>}\r\n                    </div>\r\n                </div>        \r\n             \r\n\r\n          \r\n          <div>\r\n            {this.state.edited ? (\r\n              <span></span>\r\n            ) : (\r\n              <button onClick={this.handleClick}>Edit</button>\r\n            )}\r\n        </div>\r\n        <div>\r\n          {this.state.cancel ? (\r\n            <button onClick={this.handleCancel}>Cancel</button>\r\n          ) : (\r\n            <p></p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  tog = () => {\r\n  }\r\n  handleClick = () => {\r\n    if (this.state.edit === false) {      \r\n      this.tog();\r\n      this.setState({ edited: true, edit: true, cancel: true,back:true });\r\n    } else {\r\n      this.setState({ edit: false });\r\n    }\r\n  };\r\n  handleCancel = () => {\r\n    this.setState({\r\n      firstName: this.props.FirstName,\r\n      lastName: this.props.LastName,\r\n      edited: false,\r\n      edit: false,\r\n      cancel: false,\r\n      front: true,\r\n      back:false,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      edit: false,\r\n      edited: false,\r\n      cancel: false,\r\n      front: true,\r\n      back:false,\r\n    });\r\n    this.setState({ cancel: false });\r\n  };\r\n  handleChange = (event) => {\r\n    const val = event.target.value;\r\n    this.setState({\r\n      ...this.state,\r\n      [event.target.name]: val,\r\n    });\r\n  };\r\n}\r\n\r\nexport default EForm;\r\n","import React from 'react';\r\nimport EForm from \"./Components/FormTest\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <EForm\r\n        FirstName=\"Sagar\"\r\n        LastName=\"Shrestha\"\r\n      />      <EForm\r\n        FirstName=\"Okay\"\r\n        LastName=\"Computer\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}